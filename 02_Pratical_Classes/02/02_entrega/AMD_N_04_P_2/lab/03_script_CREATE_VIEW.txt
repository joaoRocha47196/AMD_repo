--#############
--# Paulo Trigo
--#############


--==============
-- DB connection
--==============
\set dataBase db_operational
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================


-- additional information about "client_encoding" in:
-- http://www.postgresql.org/docs/9.6/static/multibyte.html
\encoding WIN1250
;



---------------------------------
DROP VIEW IF EXISTS v1_dataset;
DROP VIEW IF EXISTS v1;
DROP VIEW IF EXISTS v1_domain;
DROP VIEW IF EXISTS v1_class;
DROP VIEW IF EXISTS v2_dataset;
DROP VIEW IF EXISTS v2_attrType;
---------------------------------



-- complete the following view in order to build
-- the output data presented below at [OUT]
CREATE VIEW v1(my_order, VC1, VC2, VC3) AS
SELECT 
    2 AS my_order, -- [3 C)]
	R2.c1 AS VC1, 
	R1.c1 AS VC2, 
	R3.c1 AS VC3
FROM 
	R1
JOIN 
	R2 ON R1.c1 = R2.C1_R1
JOIN 
	R3 ON R1.c1 = R3.C1_R1
;
   

-- after completing the previous code uncomment the following 2 lines
SELECT *
FROM v1
;

--==========================
-- [OUT] The expected output
--==========================

--| vc1 | vc2 |    vc3
--|-----+-----+------------
--| 111 |   1 | 2012-01-31
--| 111 |   1 | 2012-02-28
--| 222 |   2 | 2012-03-31
--|(3 rows)


-- Follow the "practiceGuide.pdf" until arriving at this goal:
-- create the "dataset view" compatible with the Orange "3-Row-Header" format

CREATE VIEW v1_domain AS
SELECT 
    1 AS my_order, -- [3 C)]
	'000'::char(8) AS VC1, 
	1 AS VC2, 
	'2023-01-01'::date AS VC3
;
	
--CREATE VIEW v1_dataset(my_order, VC1, VC2, VC3 ) AS
--SELECT * FROM v1_domain
--UNION ALL
--SELECT * FROM v1
--ORDER BY my_order -- Use the ordering column to control the order


SELECT * FROM v1_dataset
;

--==========================
-- [3 C)] V1_domain_appers on top
--==========================
-- To ensure that the rows from v1_domain always appear first, regardless of additional 
-- rows being added to the view in the future, its needed to add an explicit ordering column 
-- to both v1_domain and v1, and then use that ordering column to sort the rows in the 
-- v1_dataset view: "my_order" 


--==========================
-- [3 D)] Testing
--==========================

--INSERT INTO r1( c1, c2, c3 )
--VALUES ( 5, 'aaa555', 'bbb555' );

--INSERT INTO r2( c1, c1_r1, c2, c3 )
--VALUES ( '444', 4, 'xxx444', 'yyy444' );

--INSERT INTO R3( C1_R1, C1_R4, C1 )
--VALUES( 4, 30, '2012-4-30' );

--INSERT INTO r4( c1 )
--VALUES ( 40 );

SELECT * FROM v1_dataset
;

-- Expected output:
-- V1_domain_appers still on top


--==========================
-- [4] v1_class
--==========================

CREATE VIEW v1_class AS
SELECT 'class' AS VC1;

CREATE VIEW v1_dataset(my_order, VC1, VC2, VC3 ) AS
SELECT my_order, VC1, VC2, VC3
FROM v1_domain
UNION ALL
SELECT NULL, VC1, NULL, NULL
FROM v1_class
UNION ALL
SELECT my_order, VC1, VC2, VC3
FROM v1
ORDER BY my_order; -- Use the ordering column to control the order

-- Follow the "practiceGuide.pdf" until arriving at this goal:
-- create the "dataset view" compatible with the Orange "Header-with-Attribute-Type" format
-- CREATE VIEW v2_dataset( my_order, VC1, VC2, VC3 ) AS
-- ;

CREATE VIEW v2_dataset AS
SELECT
    VC1 AS "D#vc1",
    VC2 AS "D#vc2",
    VC3 AS "Dc#vc3"
FROM v1;


