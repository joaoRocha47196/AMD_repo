#####################
# AMD_AULA_PRATICA_1
#####################

#######################
# Interação com a base de dados graficamente (pgAdmin)
# Utilizado na alinea 3
#######################

Alguns Detalhes de intereção com a ferramenta grafica estao presentes
no enunciado

##############################################
# Automatização da construção da base de dados (scripts)
# Utilizado na alinea 5
##############################################

############
# Launch psql
############
Pasta Instalação Postgres / bin / psql (executavel)

############
# Executar script
############
Simplesmente abrir diretoria onde este se encontra e selecionar o script desejado

############
# Restrições e dependencias~
############
Quando existem tabelas com dependencias transitivas é necessario realizar
o "DROP TABLE" pela respetiva ordem de dependencia


##############################################
# Construção modelo logico utilizando os scripts
# Utilizado na alinea 6
##############################################


############
# Dado o esquema apresentado em anexo, construindo á base dos scripts CREATE_SCHEMA 
# apresentados é possivel explicitar a seguinte abstração que representa o 
# conjunto de tabelas aferetente ao esquema
# 6) a), b)
############

TABLE R1
(
c1 INT NOT NULL, PRIMARY_KEY
c2 VARCHAR( 8 ) NOT NULL,
c3 VARCHAR( 30 ) NOT NULL
)
;


CREATE TABLE R2
(
c1 VARCHAR( 8 ) NOT NULL, PRIMARY_KEY
C1_R1 INT NOT NULL, PRIMARY_KEY , FOREIGN_KEY REFERENCES R1(C1)
c2 VARCHAR( 8 ) NOT NULL,
c3 VARCHAR( 30 ) NOT NULL
)
;

CREATE TABLE R4
(
c1 INT NOT NULL, PRIMARY_KEY
)
;

CREATE TABLE R3
(
C1_R1 INT NOT NULL, PRIMARY_KEY , FOREIGN_KEY REFERENCES R1(C1)
C1_R4 INT NOT NULL, PRIMARY_KEY , FOREIGN_KEY REFERENCES R4(C1)
c1 DATE NOT NULL
)
;

############
# Correção Script para adição de dados ao esquema criado
# Aline 6) d)
############

Sendo este o codigo apresentado, olhando as tabelas de cima 
podemos verificar que o codigo apresenta incoerencias,

-- INSERT INTO R3( C1_R1, C1_R4, C1 )
-- VALUES( 1, 10, '2012-1-31' )
--;

Para ser possivel inserir uma nova entrada na tabela R3 é necessario que
o valor passado em C1_R1 exista previamente na tabela R1 e que 
o valor passado em C1_R4 exista previamente na tabela R4, desta
forma o codigo correto seria o seguinte:

INSERT INTO R1(C1, C2, C3)
VALUES(1, 'VALUE1', 'DESCRIPTION1');

INSERT INTO R4(C1)
VALUES (10);

INSERT INTO R3( C1_R1, C1_R4, C1 )
VALUES( 1, 10, '2012-1-31' );

############
# Adicionar dados as tabelas
# Aline 6) e)
############

Para inserir os dados nas diversas tabelas, estes tambem devem ser inseridos 
por ordem de dependencia entre as tabelas, tendo de ser inseridos na seguinte ordem

R1, R2, R4, R3

O seguinte codigo ilustra uma possivel população das tabelas

- Populate table R1 with 4 tuples
INSERT INTO R1 (C1, C2, C3)
VALUES
    (2, 'VALUE2', 'DESCRIPTION2'),
    (3, 'VALUE3', 'DESCRIPTION3'),
    (4, 'VALUE4', 'DESCRIPTION4'),
    (5, 'VALUE5', 'DESCRIPTION5');

-- Populate table R2 with 4 tuples
INSERT INTO R2 (C1, C1_R1, C2, C3)
VALUES
    ('A', 2, 'B', 'DESCRIPTIONA'),
    ('C', 3, 'D', 'DESCRIPTIONC'),
    ('E', 4, 'F', 'DESCRIPTIONE'),
    ('G', 5, 'H', 'DESCRIPTIONG');

-- Populate table R4 with 4 tuples
INSERT INTO R4 (C1)
VALUES
    (11),
    (12),
    (13),
    (14);

-- Populate table R3 with 4 tuples
-- Table R3 as foreign key of table R4 so data of R4
-- must be inserted before
INSERT INTO R3 (C1_R1, C1_R4, C1)
VALUES
    (2, 11, '2012-01-31'),
    (3, 12, '2013-02-28'),
    (4, 13, '2014-03-30'),
    (5, 14, '2015-04-25');


############
# Criar uma view que agrege 3 tabelas
# Aline 6) g)
############

A unica relação que envolve 3 tabelas é a Relação de R1 -> R3 -> R4, 
sendo a seguinte view uma estruturação dessa relação


--==============================
DROP VIEW IF EXISTS v1;
--==============================


-- CREATE A VIEW INVOLVING THREE TABLES
CREATE VIEW V1 AS
SELECT
    R1.C1 AS R1_C1,
    R1.C2 AS R1_C2,
    R2.C1 AS R2_C1,
    R2.C2 AS R2_C2,
    R3.C1 AS R3_C1
FROM
    R1
JOIN
    R2 ON R1.C1 = R2.C1_R1
JOIN
    R3 ON R1.C1 = R3.C1_R1
WHERE
	R1.C1 >= 2;

SELECT * FROM V1;

############
# Apagar todas as tabelas
# Aline 6) h), i)
############

Primeiro é necessario apagar todos os dados
das tabelas, por ordem inversa de dependencia, e
de seguida eliminar efetivamente as tabelas

--==============================
-- DELETE DATA
--==============================


-- DELETE FROM R3;
DELETE FROM R3;

-- DELETE FROM R4;
DELETE FROM R4;

-- DELETE FROM R2;
DELETE FROM R2;

-- DELETE FROM R1;
DELETE FROM R1;


--==============================
-- drop constraints
--==============================

-- drop foreign key
ALTER TABLE R2 DROP CONSTRAINT fk1_R2;
ALTER TABLE R3 DROP CONSTRAINT fk1_R3;
ALTER TABLE R3 DROP CONSTRAINT fk2_R3;

-- drop primary key and unique
ALTER TABLE R1 DROP CONSTRAINT pk_R1;
ALTER TABLE R1 DROP CONSTRAINT ak1_R1;
ALTER TABLE R2 DROP CONSTRAINT pk_R2;
ALTER TABLE R3 DROP CONSTRAINT pk_R3;
ALTER TABLE R4 DROP CONSTRAINT pk_R4;

DROP VIEW IF EXISTS v1;

--==============================
-- drop tables
--==============================

DROP TABLE R2;
DROP TABLE R3;

DROP TABLE R1;
DROP TABLE R4;




